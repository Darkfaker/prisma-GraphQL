"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var relationalParser_1 = require("../../src/datamodel/relationalParser");
var documentParser_1 = require("../../src/datamodel/documentParser");
var helpers_1 = require("./helpers");
var parsersToTest = [{ name: 'relational', instance: new relationalParser_1.default() }, { name: 'document', instance: new documentParser_1.default() }];
var _loop_1 = function (parser) {
    describe(parser.name + " parser basic tests", function () {
        test('Parse a type with scalars correctly.', function () {
            var model = "\n        type User {\n          requiredInt: Int!\n          stringList: [String!]!\n          optionalDateTime: DateTime\n          anotherInt: Int! @default(value: 10)\n        }\n      ";
            var types = parser.instance.parseFromSchemaString(model);
            var userType = helpers_1.expectType(types, 'User');
            helpers_1.expectField(userType, 'requiredInt', true, false, 'Int');
            helpers_1.expectField(userType, 'stringList', false, true, 'String');
            helpers_1.expectField(userType, 'optionalDateTime', false, false, 'DateTime');
            helpers_1.expectField(userType, 'anotherInt', true, false, 'Int', false, false, '10');
        });
        test('Parse a type with an enum correctly.', function () {
            var model = "\n        type User {\n          enumField: UserRole!\n        }\n\n        enum UserRole {\n          user,\n          admin,\n          mod\n        }\n      ";
            var types = parser.instance.parseFromSchemaString(model);
            var userType = helpers_1.expectType(types, 'User');
            var userRoleEnum = helpers_1.expectType(types, 'UserRole', true);
            helpers_1.expectField(userType, 'enumField', true, false, userRoleEnum);
            helpers_1.expectField(userRoleEnum, 'user', false, false, 'String');
            helpers_1.expectField(userRoleEnum, 'admin', false, false, 'String');
            helpers_1.expectField(userRoleEnum, 'mod', false, false, 'String');
        });
        test('Connect relations correctly.', function () {
            var model = "\n        type A {\n          b: B\n          c: C @relation(nane: \"relation\")\n        }\n\n        type B {\n          a: A\n          c: C\n        }\n\n        type C {\n          a: A @relation(nane: \"relation\")\n        }\n      ";
            var types = parser.instance.parseFromSchemaString(model);
            var A = helpers_1.expectType(types, 'A');
            var B = helpers_1.expectType(types, 'B');
            var C = helpers_1.expectType(types, 'C');
            var Ab = helpers_1.expectField(A, 'b', false, false, B);
            var Ac = helpers_1.expectField(A, 'c', false, false, C);
            var Ba = helpers_1.expectField(B, 'a', false, false, A);
            var Bc = helpers_1.expectField(B, 'c', false, false, C);
            var Ca = helpers_1.expectField(C, 'a', false, false, A);
            expect(Ab.relatedField).toEqual(Ba);
            expect(Ac.relatedField).toEqual(Ca);
            expect(Ba.relatedField).toEqual(Ab);
            expect(Bc.relatedField).toEqual(null);
            expect(Ca.relatedField).toEqual(Ac);
        });
    });
};
for (var _i = 0, parsersToTest_1 = parsersToTest; _i < parsersToTest_1.length; _i++) {
    var parser = parsersToTest_1[_i];
    _loop_1(parser);
}
//# sourceMappingURL=base.js.map